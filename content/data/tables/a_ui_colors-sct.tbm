#Conditional Hooks
$Application: FS2_Open
$On Game Init:
[

function ScpuiSystem:initKeywords()
  local utils = require('utils')

  local affixes = {prefixes = {''}, suffixes = {''}}
  if cf.fileExists('keywords.tbl') then
    affixes = self:parseKeywords('keywords.tbl', affixes)
  end

  for _, v in ipairs(cf.listFiles("data/tables", "*-kwrd.tbm")) do
    self:parseKeywords(v, affixes)
  end
end

function ScpuiSystem:parseKeywordAffixes(source)
  local prefixes = {}
  local suffixes = {}
  for _, prefix in ipairs(source.prefixes) do
    table.insert(prefixes, prefix)
  end
  for _, suffix in ipairs(source.suffixes) do
    table.insert(suffixes, suffix)
  end
  while true do
    if parse.optionalString("+Prefix:") then
      table.insert(prefixes, parse.getString() .. ' ')
    elseif parse.optionalString("+Immediate Prefix:") then
      table.insert(prefixes, parse.getString())
    elseif parse.optionalString("+Suffix:") then
      table.insert(suffixes, ' ' .. parse.getString())
    elseif parse.optionalString("+Immediate Suffix:") then
      table.insert(suffixes, parse.getString())
    else
      return { prefixes = prefixes, suffixes = suffixes }
    end
  end
end

function ScpuiSystem:parseKeywords(data, inheritedAffixes)
  local keywordAlgorithm = require('keywordAlgorithm')
  parse.readFileText(data, "data/tables")
  parse.requiredString("#Default") --For now we only parse the Default section!

  local globalAffixes = self:parseKeywordAffixes(inheritedAffixes)
  while parse.optionalString("$Style:") do
    local any = false
    local style = parse.getString()
    local affixes = self:parseKeywordAffixes(globalAffixes)
    while parse.optionalString("+Text:") do
      any = true
      local text = parse.getString()
	  local tooltip = nil
	  if parse.optionalString("++Tooltip:") then
	    tooltip = parse.getString()
	  end
      for _, prefix in ipairs(affixes.prefixes) do
        for _, suffix in ipairs(affixes.suffixes) do
          local t = prefix .. text .. suffix
          if not keywordAlgorithm.registerKeyword(t, style, tooltip) then
            parse.displayMessage("SCPUI Keyword '" .. t .. "' already exists. Skipping!")
          end
        end
      end
    end
    if not any then
      parse.displayMessage("Found '$Style: " .. style .. "' with no +Text: entries!")
    end
  end
  
  parse.requiredString("#End")
  parse.stop()
  return globalAffixes
end

function ScpuiSystem:applyKeywordClasses(inputText)
  local keywordAlgorithm = require('keywordAlgorithm')
  return keywordAlgorithm.colorize(inputText)
end

ScpuiSystem:initKeywords()

]

#End
