#Conditional Hooks
$Application: FS2_Open
$On Game Init:
[
--Load up the options.tbl and tbms
ScpuiSystem.CustomOptions = {}

function ScpuiSystem:initCustomOptions()
	local utils = require('utils')
	
	--Font Multiplier is built-in so add it first
	local entry = {
		Title = utils.xstr({"Font Size Multiplier", -1}),
		Description = utils.xstr({"Multiplies the font size", -1}),
		Key = "Font_Multiplier",
		Type = "Range",
		Column = 1,
		Min = 0,
		Max = 1,
		Value = 0.25,
		NoDefault = true
	}
	table.insert(ScpuiSystem.CustomOptions, entry)

	if cf.fileExists('options.tbl') then
		self:parseOptions('options.tbl')
	end

	for _, v in ipairs(cf.listFiles("data/tables", "*-optn.tbm")) do
		self:parseOptions(v)
	end
end

function ScpuiSystem:parseOptions(data)

	parse.readFileText(data, "data/tables")

	parse.requiredString("#Custom Options")
	
	while parse.optionalString("$Name:") do
		local entry = {}
		
		entry.Title = parse.getString()
		
		if parse.optionalString("+Description:") then
			entry.Description = parse.getString()
		end
		
		parse.requiredString("+Key:")
		entry.Key = parse.getString()
		
		--Warn if Key already exists for another option
		for _, v in pairs(ScpuiSystem.CustomOptions) do
			if v.Key == entry.Key then
				ba.error("SCPUI Custom Options Key '" .. entry.Key .. "' already exists. This needs to be fixed!")
			end
		end
		
		parse.requiredString("+Type:")
		entry.Type = self:verifyParsedType(parse.getString())
		
		if parse.optionalString("+Column:") then
			entry.Column = parse.getInt()
			if entry.Column < 1 then
				entry.Column = 1
			end
			if entry.Column > 4 then
				entry.Column = 4
			end
		else
			entry.Column = 1
		end
		
		if entry.Type ~= "Header" then
		
			local valCount = 0
			local nameCount = 0
		
			if entry.Type == "Binary" or entry.Type == "Multi" then
				parse.requiredString("+Valid Values")
				
				entry.ValidValues = {}
				
				while parse.optionalString("+Val:") do
					local val = parse.getString()
					local save = true
					
					if val ~= nil then
						valCount = valCount + 1
						if entry.Type == "Binary" and valCount > 2 then
							parse.displayMessage("Option " .. entry.Title .. " is Binary but has more than 2 values. The rest will be ignored!", false)
							save = false
						end
						
						if entry.Type == "FivePoint" and valCount > 5 then
							parse.displayMessage("Option " .. entry.Title .. " is FivePoint but has more than 5 values. The rest will be ignored!", false)
							save = false
						end
						
						if save then
							entry.ValidValues[valCount] = val
						end
					end
				end
				
				if entry.Type == "Binary" and valCount < 2 then
					parse.displayMessage("Option " .. entry.Title .. " is Binary but only has " .. valCount .. "values! Binary types must have exactly 2 values.", true)
				end
				
				if entry.Type == "Multi" and valCount < 2 then
					parse.displayMessage("Option " .. entry.Title .. " is Multi but only has " .. valCount .. "values! Multi types must have at least 2 values.", true)
				end
				
				if entry.Type == "FivePoint" and valCount < 5 then
					parse.displayMessage("Option " .. entry.Title .. " is FivePoint but only has " .. valCount .. "values! FivePoint types must have exactly 5 values.", true)
				end
				
			end
				
			if entry.Type == "Binary" or entry.Type == "Multi" or entry.Type == "FivePoint" then
			
				parse.requiredString("+Display Names")
				
				entry.DisplayNames = {}
				
				while parse.optionalString("+Val:") do
					local val = parse.getString()
					local save = true
					
					if val ~= nil then
						nameCount = nameCount + 1
						if entry.Type == "Binary" and nameCount > 2 then
							parse.displayMessage("Option " .. entry.Title .. " is Binary but has more than 2 display names. The rest will be ignored!", false)
							save = false
						end
						
						if entry.Type == "FivePoint" and nameCount > 5 then
							parse.displayMessage("Option " .. entry.Title .. " is FivePoint but has more than 5 display names. The rest will be ignored!", false)
							save = false
						end
						
						if save then
							if entry.Type == "FivePoint" then
								entry.DisplayNames[nameCount] = val
							else
								entry.DisplayNames[entry.ValidValues[nameCount]] = val
							end
						end
					end
				end
				
				if entry.Type == "Binary" and nameCount < 2 then
					parse.displayMessage("Option " .. entry.Title .. " is Binary but only has " .. nameCount .. "display names! Binary types must have exactly 2 display names.", true)
				end
				
				if entry.Type == "Multi" and nameCount < 2 then
					parse.displayMessage("Option " .. entry.Title .. " is Multi but only has " .. nameCount .. "display names! Multi types must have at least 2 display names.", true)
				end
				
				if entry.Type == "FivePoint" and nameCount < 5 then
					parse.displayMessage("Option " .. entry.Title .. " is FivePoint but only has " .. nameCount .. "display names! FivePoint types must have exactly 5 display names.", true)
				end
				
				if entry.Type ~= "FivePoint" and valCount ~= nameCount then
					parse.displayMessage("Option " .. entry.Title .. " has " .. valCount .. " values but only has " .. nameCount .. " display names. There must be one display name for each value!", true)
				end
			end
			
			if entry.Type == "Range" then
				parse.requiredString("+Min:")
				entry.Min = parse.getFloat()
				
				if entry.Min < 0 then
					entry.Min = 0
				end
				
				parse.requiredString("+Max:")
				entry.Max = parse.getFloat()
				
				if entry.Max <= entry.Min then
					parse.displayMessage("Option " .. entry.Title .. " has a Max value that is less than or equal to its Min value!", true)
				end
			end
			
			parse.requiredString("+Default Value:")
			if entry.Type == "Binary" or entry.Type == "Multi" then
				entry.Value = parse.getString()
			elseif entry.Type == "Range" then
				local val = parse.getFloat()
				if val < entry.Min then
					val = entry.Min
				end
				if val > entry.Max then
					val = entry.Max
				end
				entry.Value = val
			elseif entry.Type == "FivePoint" or entry.Type == "TenPoint" then
				local val = parse.getInt()
				if val < 1 then
					val = 1
				end
				if entry.Type == "FivePoint" and val > 5 then
					val = 5
				end
				if entry.Type == "TenPoint" and val > 10 then
					val = 10
				end
				entry.Value = val
			end
			
			if parse.optionalString("+Force Selector:") then
				entry.ForceSelector = parse.getBoolean()
			else
				entry.ForceSelector = false
			end
			
			if parse.optionalString("+No Default:") then --this needs a better name
				entry.NoDefault = parse.getBoolean()
			else
				entry.NoDefault = false
			end
		end
		
		table.insert(ScpuiSystem.CustomOptions, entry)
	end
	
	parse.requiredString("#End")

	parse.stop()

end

function ScpuiSystem:verifyParsedType(val)

	if string.lower(val) == "header" then
		return "Header"
	end
	
	if string.lower(val) == "binary" then
		return "Binary"
	end
	
	if string.lower(val) == "multi" then
		return "Multi"
	end
	
	if string.lower(val) == "range" then
		return "Range"
	end
	
	if string.lower(val) == "fivepoint" then
		return "FivePoint"
	end
	
	if string.lower(val) == "tenpoint" then
		return "TenPoint"
	end
	
	parse.displayMessage("Option type " .. val .. " is not valid!", true)
	
end

function ScpuiSystem:loadOptionsFromFile()

	local json = require('dkjson')
  
	local location = 'data/players'
  
	local file = nil
	local config = {}
  
	if cf.fileExists('scpui_options.cfg') then
		file = cf.openFile('scpui_options.cfg', 'r', location)
		config = json.decode(file:read('*a'))
		file:close()
		if not config then
			config = {}
		end
	end
  
	if not config[ba.getCurrentPlayer():getName()] then
		config[ba.getCurrentPlayer():getName()] = {}
	end
	
	local mod = ba.getModTitle()
	
	if mod == "" then
		ba.error("SCPUI requires the current mod have a title in game_settings.tbl!")
	end
	
	if not config[ba.getCurrentPlayer():getName()][mod] then
		return nil
	else
		return config[ba.getCurrentPlayer():getName()][mod]
	end
end

function ScpuiSystem:saveOptionsToFile(data)

	local json = require('dkjson')
  
	local location = 'data/players'
  
	local file = nil
	local config = {}
  
	if cf.fileExists('scpui_options.cfg') then
		file = cf.openFile('scpui_options.cfg', 'r', location)
		config = json.decode(file:read('*a'))
		file:close()
		if not config then
			config = {}
		end
	end
  
	if not config[ba.getCurrentPlayer():getName()] then
		config[ba.getCurrentPlayer():getName()] = {}
	end
	
	local mod = ba.getModTitle()
	
	if mod == "" then
		ba.error("SCPUI requires the current mod have a title in game_settings.tbl!")
	end
	
	config[ba.getCurrentPlayer():getName()][mod] = data
	
	local utils = require('utils')
	config = utils.cleanPilotsFromSaveData(config)
  
	file = cf.openFile('scpui_options.cfg', 'w', location)
	file:write(json.encode(config))
	file:close()
end

ScpuiSystem:initCustomOptions()

--Here we load the global mod options or the defaults for use before a player is selected
local saveFilename = 'scpui_options_global.cfg'
if cf.fileExists(saveFilename, 'data/players', true) then
	local file = cf.openFile(saveFilename, 'r', 'data/players')
	local config = require('dkjson').decode(file:read('*a'))
	file:close()
	if not config then
		config = {}
	end
	
	ScpuiOptionValues = config
else
	ScpuiOptionValues = {}
	for i, v in ipairs(ScpuiSystem.CustomOptions) do
		ScpuiOptionValues[v.Key] = v.Value
	end
	local json = require('dkjson')
	local file = cf.openFile(saveFilename, 'w', 'data/players')
	file:write(json.encode(ScpuiOptionValues))
	file:close()
end

]

$On State End:
[
if ((hv.OldState.Name == "GS_STATE_INITIAL_PLAYER_SELECT") and (hv.NewState.Name == "GS_STATE_MAIN_MENU")) or hv.OldState.Name == "GS_STATE_BARRACKS_MENU" then
	--Here we load the mod options save data for the selected player
	ScpuiOptionValues = {}
	local utils = require('utils')
	ScpuiOptionValues = ScpuiSystem:loadOptionsFromFile()
	
	--load defaults if we have bad data
	if type(ScpuiOptionValues) ~= "table" then
		ba.print("SCPUI: Got bad ScpuiOptionValues data! Loading defaults!")
		ScpuiOptionValues = {}
		for i, v in ipairs(ScpuiSystem.CustomOptions) do
			ScpuiOptionValues[v.Key] = v.Value
		end
		ScpuiSystem:saveOptionsToFile(ScpuiOptionValues)
	end
end

]

#End